\section{Fonctions internes à la compilation}
La compilation des opérateurs vers du pseudo-code EPL dépend parfois de certains paramètres. Par exemple il peut être nécessaire de vérifier si une fenêtre doit être créée en fonction de l'opérande et éventuellement créer la fenêtre, ou encore d'extraire le début et la fin d'un état. Ces paramètres sont vérifiés par des fonctions qui assurent également certaine opérations.


%Certaines fonctions sont utilisées pour la génération du pseudo-code EPL, par exemple, pour extraire le début et la fin d'un état, ou encore créer une fenêtre.
%Functions are used to generate EPL pseudo-code, especially extract beginning and end events from a state. 
\subsection*{Becomes: $\mathds{S}\times\mathds{B}\rightarrow \mathds{E}$}
Cette fonction traduit un état en un évènement avec la valeur correspondante.
%This function translates a state into an event with the corresponding value.
\begin{figure}[!h]
\begin{lstlisting}[frame=bt]
  $Becomes(p=v,v)\rightarrow p\Rightarrow v$
  $Becomes(p=v,v')\rightarrow p\Rightarrow v'$
\end{lstlisting}
\caption{Fonction Becomes. Traduit un état en un évènement.}
\label{listing:becomes}
\end{figure}
\subsection*{WindowIfComplex}
Cette fonction vérifie si une fenêtre doit être créée et retourne son identifiant si elle est crée.
%This function checks if a window must be created and returns its id.
%
\begin{figure}[!h]
\begin{lstlisting}[frame=bt]
//fonction WindowIfComplex
input: child
output: window_id or leaf_code

if child is leaf
then
  return child's code
else
  createWindow(child)
  return window_id
\end{lstlisting}
\caption{Pseudo-code illustrant la fonction WindowIfComplex. Cette fonction vérifie si une fenêtre doit être créée.}
\label{listing:windoifcomplex}
\end{figure}

\subsection*{CreateWindow}
Si le fils du n{\oe}ud courant est une séquence d'évènements, alors une fenêtre est crée pour identifier la sous séquence d'évènements.
%If a son of the current operator is a sequence of event, and the operator is not concerned by the covering of the last state, then a window is created to recognized this sub-sequence of events.
\begin{figure}[!h]
\begin{lstlisting}[frame=bt]
//fonction CreateWindow
input: node
output: window_id

write:
   create window window_id.std:unique(user,role.location) 
              select * from StreamEvent
   insert into window_id select rule_id 
              from pattern [ TranstaleRule(code) ]'

return window_id
\end{lstlisting}
\caption{Pseudo-code illustrant la fonction CreateWindow. Cette fonction créée une fenêtre à partir du code du n{\oe}ud correspondant.}
\label{listing:createwindow}
\end{figure}
\subsection*{BoundedWindowIfComplex}
Cette fonction vérifie si le fils doit être fenêtré. Si un fenêtre est créée, un argument est ajouté à l'identifiant de la fenêtre afin d'assurer que l'évènement produit par celle-ci est bornée par le n{\oe}ud qui sert de borne.
\begin{figure}[!h]
\begin{lstlisting}[frame=bt]
//fonction BoundedWindowIfComplex
input: child,boundNode
output: code

isWindow = WindowIfComplex(child)

if( isWindow is child's code )
then
  return child's code
else
  return 'isWindow(timestamp>boundNode.timestamp)'
\end{lstlisting}
\caption{Pseudo-code illustrant la fonction BoundedWindowIfComplex. Cette fonction vérifie si une fenêtre dont les évènements seront bornés doit être créée.}
\label{listing:createwindow}
\end{figure}

\subsection*{TranslateEvent}
Cette fonction les évènements pseudo-code EPL en évènements structurés EPL à partir
des informations présentes dans la tables statique~\ref{listing:table_static_generique}.

\begin{figure}[!h]
\begin{lstlisting}[frame=bt]
//fonction TranslateEvent
input: EPL pseudo-code // name -> val1
output: EPL code // name=StreamEvent(role.location=`loc',
                 //                  role.kind=`kind',
                 //                  value=`val1',
                 //                  user=X.user) 
\end{lstlisting}
\caption{Pseudo-code illustrant la fonction TranslateRule. Cette fonction transforme les évènements en pseudo-code EPL en évènements structurés EPL.}
\label{listing:translateevent}
\end{figure}
